/**
\page pipelining-virtual Example: Virtual pipeline chunks

Let us look at an example of how to use virtual chunks. The following is an
example of an HTML handler with optional parsing and weeding. If weeding is
requested (noText or noDynamic is set to true), the input HTML is parsed.
Otherwise, it is fed directly to the output without parsing.
The items passed around are html_tokens (representing a context-free HTML
token; text, start node, end node, attribute, etc.) and tag_paths (representing
a context-sensitive HTML leaf node; a token as well as the path from the root
to the token).

\code
virtual_chunk_begin<html_token> input_pipe;

virtual_chunk<html_token, tag_path> parse_pipe;
virtual_chunk<tag_path, tag_path> remove_text;
virtual_chunk<tag_path, tag_path> remove_dynamic;

virtual_chunk_end<tag_path> reassembling_output;
virtual_chunk_end<html_token> simple_output;

if (!url.empty()) {
	input_pipe = curl_input(url) // pipe_begin
	| curl_body_extract()        // pipe_middle
	| html_scanner();            // pipe_middle
	// result is boxed into a virtual chunk

} else {
	input_pipe = default_tag_generator();
	// pipe_begin boxed into virtual chunk
}

pipeline p;

if (noText || noDynamic) {
	parse_pipe = html_parser();

	if (noText)
		remove_text = html_text_weeder();

	if (noDynamic)
		remove_dynamic = html_javascript_weeder()
		| html_css_weeder();

	reassembling_output = html_reassembler();

	p = input_pipe         // virtual_chunk_begin
	| parse_pipe           // virtual_chunk_middle
	| remove_text          // optional virtual_chunk_middle
	| remove_dynamic       // optional virtual_chunk_middle
	| reassembling_output; // virtual_chunk_end
} else {
	simple_output = tag_printer();

	p = input_pipe         // virtual_chunk_begin
	| simple_output;       // virtual_chunk_end
}

p(); // invoking the pipeline as without chunks
\endcode

Usually, supporting virtual chunks requires no additional work on the
pipe segment end, as long as the pipe segment is templated to accept any
pipe segment as destination.

In addition to constructing virtual chunks inline from pipe_bases, virtual
chunks may be returned from a function in an implementation object out into a
using object. This way, the using object does not have to define the pipe
segment implementations - all it has to know is the type of object passed
between the virtual chunks.

If the above options were implemented using compile-time switching on template
parameters, the emitted code size would be eight times as large, corresponding
to the eight different combinations of choices for noText, noDynamic and
url.empty().
*/
